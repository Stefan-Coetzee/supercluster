{"ast":null,"code":"var _jsxFileName = \"/Users/stefancoetzee/Documents/GitHub/supercluster/frontend/src/components/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport superclusterAPI from '../api/superclusterAPI';\n\n// Get Mapbox token from .env file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN || 'pk.eyJ1Ijoic2NvZXR6ZWUiLCJhIjoiY202N3RnZzZzMDgzZTJyczg4d3Z2NDhubiJ9.htvS1yoTXD2iSzSEz5Z5Fw';\nconst Map = ({\n  activeLayers,\n  filters\n}) => {\n  _s();\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [indexKey, setIndexKey] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [lng, setLng] = useState(0);\n  const [lat, setLat] = useState(20);\n  const [zoom, setZoom] = useState(1.5);\n\n  // Initial map setup\n  useEffect(() => {\n    if (map.current) return; // Map already initialized\n\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/mapbox/light-v11',\n      center: [lng, lat],\n      zoom: zoom\n    });\n\n    // Add navigation controls\n    map.current.addControl(new mapboxgl.NavigationControl(), 'top-left');\n\n    // Add fullscreen control\n    map.current.addControl(new mapboxgl.FullscreenControl());\n\n    // Add scale\n    map.current.addControl(new mapboxgl.ScaleControl({\n      maxWidth: 200,\n      unit: 'metric'\n    }));\n\n    // Event handlers\n    map.current.on('move', () => {\n      setLng(parseFloat(map.current.getCenter().lng.toFixed(4)));\n      setLat(parseFloat(map.current.getCenter().lat.toFixed(4)));\n      setZoom(parseFloat(map.current.getZoom().toFixed(2)));\n    });\n\n    // Initial load\n    map.current.on('load', () => {\n      // Add source for clusters with empty data initially\n      map.current.addSource('clusters', {\n        type: 'geojson',\n        data: {\n          type: 'FeatureCollection',\n          features: []\n        },\n        cluster: false // We handle clustering on the server\n      });\n\n      // Layer for clusters (circles)\n      map.current.addLayer({\n        id: 'clusters-circles',\n        type: 'circle',\n        source: 'clusters',\n        filter: ['has', 'point_count'],\n        paint: {\n          'circle-color': ['step', ['get', 'point_count'], '#51bbd6',\n          // 0-20 points\n          20, '#f1f075',\n          // 20-100 points\n          100, '#f28cb1' // 100+ points\n          ],\n          'circle-radius': ['step', ['get', 'point_count'], 20,\n          // Base size\n          20, 25,\n          // 20-100 points\n          100, 30 // 100+ points\n          ],\n          'circle-opacity': 0.8,\n          'circle-stroke-width': 2,\n          'circle-stroke-color': '#fff',\n          'circle-stroke-opacity': 0.5\n        }\n      });\n\n      // Layer for cluster counts\n      map.current.addLayer({\n        id: 'cluster-counts',\n        type: 'symbol',\n        source: 'clusters',\n        filter: ['has', 'point_count'],\n        layout: {\n          'text-field': '{point_count_abbreviated}',\n          'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n          'text-size': 12\n        },\n        paint: {\n          'text-color': '#ffffff'\n        }\n      });\n\n      // Layer for individual points\n      map.current.addLayer({\n        id: 'unclustered-points',\n        type: 'circle',\n        source: 'clusters',\n        filter: ['!', ['has', 'point_count']],\n        paint: {\n          'circle-color': '#11b4da',\n          'circle-radius': 6,\n          'circle-stroke-width': 1,\n          'circle-stroke-color': '#fff'\n        }\n      });\n\n      // Layer for graduate points (separate visualization)\n      map.current.addLayer({\n        id: 'graduate-points',\n        type: 'circle',\n        source: 'clusters',\n        filter: ['all', ['!', ['has', 'point_count']], ['==', ['get', 'is_graduate_learner'], true]],\n        paint: {\n          'circle-color': '#4caf50',\n          // Green for graduates\n          'circle-radius': 6,\n          'circle-stroke-width': 1,\n          'circle-stroke-color': '#fff'\n        }\n      });\n\n      // Layer for featured points (separate visualization)\n      map.current.addLayer({\n        id: 'featured-points',\n        type: 'circle',\n        source: 'clusters',\n        filter: ['all', ['!', ['has', 'point_count']], ['==', ['get', 'is_featured'], true]],\n        paint: {\n          'circle-color': '#ff9800',\n          // Orange for featured\n          'circle-radius': 6,\n          'circle-stroke-width': 1,\n          'circle-stroke-color': '#fff'\n        }\n      });\n\n      // Layer for entrepreneurs (separate visualization)\n      map.current.addLayer({\n        id: 'entrepreneur-points',\n        type: 'circle',\n        source: 'clusters',\n        filter: ['all', ['!', ['has', 'point_count']], ['==', ['get', 'is_running_a_venture'], true]],\n        paint: {\n          'circle-color': '#9c27b0',\n          // Purple for entrepreneurs\n          'circle-radius': 6,\n          'circle-stroke-width': 1,\n          'circle-stroke-color': '#fff'\n        }\n      });\n\n      // Add popup on click (for unclustered points)\n      map.current.on('click', 'unclustered-points', e => {\n        if (!e.features || e.features.length === 0) return;\n        const feature = e.features[0];\n        const coordinates = feature.geometry.coordinates.slice();\n        const properties = feature.properties;\n\n        // Create HTML content for popup\n        const popupContent = `\n          <h3>${properties.full_name || 'Anonymous'}</h3>\n          <p><strong>Country:</strong> ${properties.country_of_residence || 'Unknown'}</p>\n          <p><strong>Gender:</strong> ${properties.gender || 'Unknown'}</p>\n          <p><strong>Graduate:</strong> ${properties.is_graduate_learner ? 'Yes' : 'No'}</p>\n          <p><strong>Employed:</strong> ${properties.is_wage_employed ? 'Yes' : 'No'}</p>\n          <p><strong>Entrepreneur:</strong> ${properties.is_running_a_venture ? 'Yes' : 'No'}</p>\n          ${properties.is_featured ? '<p><strong>‚≠ê Featured</strong></p>' : ''}\n        `;\n\n        // Ensure that if the map is zoomed out such that multiple\n        // copies of the feature are visible, the popup appears\n        // over the copy being pointed to.\n        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n        }\n        new mapboxgl.Popup().setLngLat(coordinates).setHTML(popupContent).addTo(map.current);\n      });\n\n      // Click on a cluster to zoom in\n      map.current.on('click', 'clusters-circles', e => {\n        if (!e.features || e.features.length === 0) return;\n        const feature = e.features[0];\n        // Get expansion zoom if available, otherwise zoom in by 2 levels\n        const expansionZoom = feature.properties.expansion_zoom || map.current.getZoom() + 2;\n        map.current.easeTo({\n          center: feature.geometry.coordinates,\n          zoom: expansionZoom\n        });\n      });\n\n      // Change cursor to pointer when hovering over clusters or points\n      map.current.on('mouseenter', 'clusters-circles', () => {\n        map.current.getCanvas().style.cursor = 'pointer';\n      });\n      map.current.on('mouseleave', 'clusters-circles', () => {\n        map.current.getCanvas().style.cursor = '';\n      });\n      map.current.on('mouseenter', 'unclustered-points', () => {\n        map.current.getCanvas().style.cursor = 'pointer';\n      });\n      map.current.on('mouseleave', 'unclustered-points', () => {\n        map.current.getCanvas().style.cursor = '';\n      });\n\n      // Initial data fetch\n      fetchClusters();\n    });\n  }, []);\n\n  // Update layers visibility based on active layers\n  useEffect(() => {\n    if (!map.current || !map.current.loaded()) return;\n\n    // Define all available layers\n    const layerIds = ['clusters-circles', 'cluster-counts', 'unclustered-points', 'graduate-points', 'featured-points', 'entrepreneur-points'];\n\n    // For each layer, set visibility based on whether it's in the active layers\n    layerIds.forEach(layerId => {\n      const visibility = activeLayers.includes(layerId) ? 'visible' : 'none';\n      map.current.setLayoutProperty(layerId, 'visibility', visibility);\n    });\n  }, [activeLayers]);\n\n  // Fetch clusters when filters change or map moves\n  const fetchClusters = async () => {\n    setLoading(true);\n    try {\n      const bounds = map.current.getBounds();\n      const bbox = [bounds.getWest(), bounds.getSouth(), bounds.getEast(), bounds.getNorth()];\n      const currentZoom = Math.round(map.current.getZoom());\n\n      // Single API call with filters\n      const clustersResponse = await superclusterAPI.getClusters(bbox, currentZoom, filters);\n\n      // Update the GeoJSON source with new data\n      if (map.current.getSource('clusters')) {\n        map.current.getSource('clusters').setData({\n          type: 'FeatureCollection',\n          features: clustersResponse.features\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching clusters:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Re-fetch when filters change\n  useEffect(() => {\n    fetchClusters();\n  }, [filters]);\n\n  // Re-fetch when map moves\n  useEffect(() => {\n    if (!map.current) return;\n\n    // Use a debounced version to avoid too many API calls while panning/zooming\n    const onMoveEnd = () => {\n      fetchClusters();\n    };\n    map.current.on('moveend', onMoveEnd);\n    return () => {\n      if (map.current) {\n        map.current.off('moveend', onMoveEnd);\n      }\n    };\n  }, [filters]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainer,\n      className: \"map-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-info\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Longitude: \", lng, \"\\xB0 | Latitude: \", lat, \"\\xB0 | Zoom: \", zoom]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"wC2+ldTeDJTYh01Geip+LQraOYw=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useRef","useEffect","useState","mapboxgl","superclusterAPI","jsxDEV","_jsxDEV","accessToken","process","env","REACT_APP_MAPBOX_ACCESS_TOKEN","Map","activeLayers","filters","_s","mapContainer","map","indexKey","setIndexKey","loading","setLoading","lng","setLng","lat","setLat","zoom","setZoom","current","container","style","center","addControl","NavigationControl","FullscreenControl","ScaleControl","maxWidth","unit","on","parseFloat","getCenter","toFixed","getZoom","addSource","type","data","features","cluster","addLayer","id","source","filter","paint","layout","e","length","feature","coordinates","geometry","slice","properties","popupContent","full_name","country_of_residence","gender","is_graduate_learner","is_wage_employed","is_running_a_venture","is_featured","Math","abs","lngLat","Popup","setLngLat","setHTML","addTo","expansionZoom","expansion_zoom","easeTo","getCanvas","cursor","fetchClusters","loaded","layerIds","forEach","layerId","visibility","includes","setLayoutProperty","bounds","getBounds","bbox","getWest","getSouth","getEast","getNorth","currentZoom","round","clustersResponse","getClusters","getSource","setData","error","console","onMoveEnd","off","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/stefancoetzee/Documents/GitHub/supercluster/frontend/src/components/Map.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport superclusterAPI from '../api/superclusterAPI';\n\n// Get Mapbox token from .env file\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN || 'pk.eyJ1Ijoic2NvZXR6ZWUiLCJhIjoiY202N3RnZzZzMDgzZTJyczg4d3Z2NDhubiJ9.htvS1yoTXD2iSzSEz5Z5Fw';\n\nconst Map = ({ activeLayers, filters }) => {\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [indexKey, setIndexKey] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [lng, setLng] = useState(0);\n  const [lat, setLat] = useState(20);\n  const [zoom, setZoom] = useState(1.5);\n\n  // Initial map setup\n  useEffect(() => {\n    if (map.current) return; // Map already initialized\n\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/mapbox/light-v11',\n      center: [lng, lat],\n      zoom: zoom\n    });\n\n    // Add navigation controls\n    map.current.addControl(new mapboxgl.NavigationControl(), 'top-left');\n    \n    // Add fullscreen control\n    map.current.addControl(new mapboxgl.FullscreenControl());\n\n    // Add scale\n    map.current.addControl(new mapboxgl.ScaleControl({ maxWidth: 200, unit: 'metric' }));\n\n    // Event handlers\n    map.current.on('move', () => {\n      setLng(parseFloat(map.current.getCenter().lng.toFixed(4)));\n      setLat(parseFloat(map.current.getCenter().lat.toFixed(4)));\n      setZoom(parseFloat(map.current.getZoom().toFixed(2)));\n    });\n\n    // Initial load\n    map.current.on('load', () => {\n      // Add source for clusters with empty data initially\n      map.current.addSource('clusters', {\n        type: 'geojson',\n        data: {\n          type: 'FeatureCollection',\n          features: []\n        },\n        cluster: false // We handle clustering on the server\n      });\n\n      // Layer for clusters (circles)\n      map.current.addLayer({\n        id: 'clusters-circles',\n        type: 'circle',\n        source: 'clusters',\n        filter: ['has', 'point_count'],\n        paint: {\n          'circle-color': [\n            'step',\n            ['get', 'point_count'],\n            '#51bbd6', // 0-20 points\n            20,\n            '#f1f075', // 20-100 points\n            100,\n            '#f28cb1' // 100+ points\n          ],\n          'circle-radius': [\n            'step',\n            ['get', 'point_count'],\n            20, // Base size\n            20,\n            25, // 20-100 points\n            100,\n            30 // 100+ points\n          ],\n          'circle-opacity': 0.8,\n          'circle-stroke-width': 2,\n          'circle-stroke-color': '#fff',\n          'circle-stroke-opacity': 0.5\n        }\n      });\n\n      // Layer for cluster counts\n      map.current.addLayer({\n        id: 'cluster-counts',\n        type: 'symbol',\n        source: 'clusters',\n        filter: ['has', 'point_count'],\n        layout: {\n          'text-field': '{point_count_abbreviated}',\n          'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n          'text-size': 12\n        },\n        paint: {\n          'text-color': '#ffffff'\n        }\n      });\n\n      // Layer for individual points\n      map.current.addLayer({\n        id: 'unclustered-points',\n        type: 'circle',\n        source: 'clusters',\n        filter: ['!', ['has', 'point_count']],\n        paint: {\n          'circle-color': '#11b4da',\n          'circle-radius': 6,\n          'circle-stroke-width': 1,\n          'circle-stroke-color': '#fff'\n        }\n      });\n\n      // Layer for graduate points (separate visualization)\n      map.current.addLayer({\n        id: 'graduate-points',\n        type: 'circle',\n        source: 'clusters',\n        filter: ['all', \n          ['!', ['has', 'point_count']], \n          ['==', ['get', 'is_graduate_learner'], true]\n        ],\n        paint: {\n          'circle-color': '#4caf50', // Green for graduates\n          'circle-radius': 6,\n          'circle-stroke-width': 1,\n          'circle-stroke-color': '#fff'\n        }\n      });\n\n      // Layer for featured points (separate visualization)\n      map.current.addLayer({\n        id: 'featured-points',\n        type: 'circle',\n        source: 'clusters',\n        filter: ['all', \n          ['!', ['has', 'point_count']], \n          ['==', ['get', 'is_featured'], true]\n        ],\n        paint: {\n          'circle-color': '#ff9800', // Orange for featured\n          'circle-radius': 6,\n          'circle-stroke-width': 1,\n          'circle-stroke-color': '#fff'\n        }\n      });\n\n      // Layer for entrepreneurs (separate visualization)\n      map.current.addLayer({\n        id: 'entrepreneur-points',\n        type: 'circle',\n        source: 'clusters',\n        filter: ['all', \n          ['!', ['has', 'point_count']], \n          ['==', ['get', 'is_running_a_venture'], true]\n        ],\n        paint: {\n          'circle-color': '#9c27b0', // Purple for entrepreneurs\n          'circle-radius': 6,\n          'circle-stroke-width': 1,\n          'circle-stroke-color': '#fff'\n        }\n      });\n\n      // Add popup on click (for unclustered points)\n      map.current.on('click', 'unclustered-points', (e) => {\n        if (!e.features || e.features.length === 0) return;\n        \n        const feature = e.features[0];\n        const coordinates = feature.geometry.coordinates.slice();\n        const properties = feature.properties;\n        \n        // Create HTML content for popup\n        const popupContent = `\n          <h3>${properties.full_name || 'Anonymous'}</h3>\n          <p><strong>Country:</strong> ${properties.country_of_residence || 'Unknown'}</p>\n          <p><strong>Gender:</strong> ${properties.gender || 'Unknown'}</p>\n          <p><strong>Graduate:</strong> ${properties.is_graduate_learner ? 'Yes' : 'No'}</p>\n          <p><strong>Employed:</strong> ${properties.is_wage_employed ? 'Yes' : 'No'}</p>\n          <p><strong>Entrepreneur:</strong> ${properties.is_running_a_venture ? 'Yes' : 'No'}</p>\n          ${properties.is_featured ? '<p><strong>‚≠ê Featured</strong></p>' : ''}\n        `;\n        \n        // Ensure that if the map is zoomed out such that multiple\n        // copies of the feature are visible, the popup appears\n        // over the copy being pointed to.\n        while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {\n          coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;\n        }\n        \n        new mapboxgl.Popup()\n          .setLngLat(coordinates)\n          .setHTML(popupContent)\n          .addTo(map.current);\n      });\n      \n      // Click on a cluster to zoom in\n      map.current.on('click', 'clusters-circles', (e) => {\n        if (!e.features || e.features.length === 0) return;\n        \n        const feature = e.features[0];\n        // Get expansion zoom if available, otherwise zoom in by 2 levels\n        const expansionZoom = feature.properties.expansion_zoom || (map.current.getZoom() + 2);\n        \n        map.current.easeTo({\n          center: feature.geometry.coordinates,\n          zoom: expansionZoom\n        });\n      });\n\n      // Change cursor to pointer when hovering over clusters or points\n      map.current.on('mouseenter', 'clusters-circles', () => {\n        map.current.getCanvas().style.cursor = 'pointer';\n      });\n      \n      map.current.on('mouseleave', 'clusters-circles', () => {\n        map.current.getCanvas().style.cursor = '';\n      });\n      \n      map.current.on('mouseenter', 'unclustered-points', () => {\n        map.current.getCanvas().style.cursor = 'pointer';\n      });\n      \n      map.current.on('mouseleave', 'unclustered-points', () => {\n        map.current.getCanvas().style.cursor = '';\n      });\n\n      // Initial data fetch\n      fetchClusters();\n    });\n\n  }, []);\n\n  // Update layers visibility based on active layers\n  useEffect(() => {\n    if (!map.current || !map.current.loaded()) return;\n\n    // Define all available layers\n    const layerIds = [\n      'clusters-circles',\n      'cluster-counts',\n      'unclustered-points',\n      'graduate-points',\n      'featured-points',\n      'entrepreneur-points'\n    ];\n    \n    // For each layer, set visibility based on whether it's in the active layers\n    layerIds.forEach(layerId => {\n      const visibility = activeLayers.includes(layerId) ? 'visible' : 'none';\n      map.current.setLayoutProperty(layerId, 'visibility', visibility);\n    });\n  }, [activeLayers]);\n\n  // Fetch clusters when filters change or map moves\n  const fetchClusters = async () => {\n    setLoading(true);\n    try {\n      const bounds = map.current.getBounds();\n      const bbox = [\n        bounds.getWest(),  \n        bounds.getSouth(),\n        bounds.getEast(),  \n        bounds.getNorth() \n      ];\n      const currentZoom = Math.round(map.current.getZoom());\n      \n      // Single API call with filters\n      const clustersResponse = await superclusterAPI.getClusters(\n        bbox,\n        currentZoom,\n        filters\n      );\n      \n      // Update the GeoJSON source with new data\n      if (map.current.getSource('clusters')) {\n        map.current.getSource('clusters').setData({\n          type: 'FeatureCollection',\n          features: clustersResponse.features\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching clusters:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Re-fetch when filters change\n  useEffect(() => {\n    fetchClusters();\n  }, [filters]);\n\n  // Re-fetch when map moves\n  useEffect(() => {\n    if (!map.current) return;\n    \n    // Use a debounced version to avoid too many API calls while panning/zooming\n    const onMoveEnd = () => {\n      fetchClusters();\n    };\n    \n    map.current.on('moveend', onMoveEnd);\n    \n    return () => {\n      if (map.current) {\n        map.current.off('moveend', onMoveEnd);\n      }\n    };\n  }, [filters]);\n\n  return (\n    <div className=\"map-wrapper\">\n      <div ref={mapContainer} className=\"map-container\" />\n      {loading && (\n        <div className=\"loading-overlay\">\n          <div className=\"loading-spinner\"></div>\n        </div>\n      )}\n      <div className=\"map-info\">\n        <span>Longitude: {lng}¬∞ | Latitude: {lat}¬∞ | Zoom: {zoom}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Map; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}