{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = '/api';\nexport const superclusterAPI = {\n  // Build an index with specific filters\n  buildIndex: async (filters = {}) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/buildIndex`, {\n        filters\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error building index:', error);\n      throw error;\n    }\n  },\n  // Get clusters for a specific bounding box and zoom level\n  getClusters: async (bbox, zoom, indexKey = null, filters = {}) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/getClusters`, {\n        bbox,\n        zoom,\n        indexKey,\n        filters\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error getting clusters:', error);\n      throw error;\n    }\n  },\n  // Get available filters\n  getAvailableFilters: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/availableFilters`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting available filters:', error);\n      throw error;\n    }\n  },\n  // Get cache statistics\n  getStats: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/stats`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting stats:', error);\n      throw error;\n    }\n  },\n  // Clear the supercluster index cache\n  clearCache: async () => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/clearCache`);\n      return response.data;\n    } catch (error) {\n      console.error('Error clearing cache:', error);\n      throw error;\n    }\n  }\n};\nexport default superclusterAPI;","map":{"version":3,"names":["axios","API_BASE_URL","superclusterAPI","buildIndex","filters","response","post","data","error","console","getClusters","bbox","zoom","indexKey","getAvailableFilters","get","getStats","clearCache"],"sources":["/Users/stefancoetzee/Documents/GitHub/supercluster/frontend/src/api/superclusterAPI.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = '/api';\n\nexport const superclusterAPI = {\n  // Build an index with specific filters\n  buildIndex: async (filters = {}) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/buildIndex`, {\n        filters\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error building index:', error);\n      throw error;\n    }\n  },\n\n  // Get clusters for a specific bounding box and zoom level\n  getClusters: async (bbox, zoom, indexKey = null, filters = {}) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/getClusters`, {\n        bbox,\n        zoom,\n        indexKey,\n        filters\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error getting clusters:', error);\n      throw error;\n    }\n  },\n\n  // Get available filters\n  getAvailableFilters: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/availableFilters`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting available filters:', error);\n      throw error;\n    }\n  },\n\n  // Get cache statistics\n  getStats: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/stats`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting stats:', error);\n      throw error;\n    }\n  },\n\n  // Clear the supercluster index cache\n  clearCache: async () => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/clearCache`);\n      return response.data;\n    } catch (error) {\n      console.error('Error clearing cache:', error);\n      throw error;\n    }\n  }\n};\n\nexport default superclusterAPI; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,MAAM;AAE3B,OAAO,MAAMC,eAAe,GAAG;EAC7B;EACAC,UAAU,EAAE,MAAAA,CAAOC,OAAO,GAAG,CAAC,CAAC,KAAK;IAClC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGL,YAAY,aAAa,EAAE;QAC9DG;MACF,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAE,WAAW,EAAE,MAAAA,CAAOC,IAAI,EAAEC,IAAI,EAAEC,QAAQ,GAAG,IAAI,EAAET,OAAO,GAAG,CAAC,CAAC,KAAK;IAChE,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGL,YAAY,cAAc,EAAE;QAC/DU,IAAI;QACJC,IAAI;QACJC,QAAQ;QACRT;MACF,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAM,mBAAmB,EAAE,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAML,KAAK,CAACe,GAAG,CAAC,GAAGd,YAAY,mBAAmB,CAAC;MACpE,OAAOI,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAQ,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,IAAI;MACF,MAAMX,QAAQ,GAAG,MAAML,KAAK,CAACe,GAAG,CAAC,GAAGd,YAAY,QAAQ,CAAC;MACzD,OAAOI,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAS,UAAU,EAAE,MAAAA,CAAA,KAAY;IACtB,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGL,YAAY,aAAa,CAAC;MAC/D,OAAOI,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAeN,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}