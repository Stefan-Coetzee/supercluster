{"ast":null,"code":"var _jsxFileName = \"/Users/stefancoetzee/Documents/GitHub/supercluster/frontend/src/components/Map.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport superclusterAPI from '../api/superclusterAPI';\n\n// Advanced request manager that combines throttling and debouncing\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createRequestManager = () => {\n  let timeout = null;\n  let lastExecuted = 0;\n  return (fn, options = {}) => {\n    const {\n      throttleMs = 1000,\n      // Minimum time between executions during continuous interactions\n      debounceMs = 500 // Wait time after last interaction\n    } = options;\n    return (...args) => {\n      const now = Date.now();\n      const remaining = lastExecuted + throttleMs - now;\n\n      // Clear any existing timeout\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n\n      // If we've waited long enough, execute immediately\n      if (remaining <= 0) {\n        lastExecuted = now;\n        fn(...args);\n      } else {\n        // Otherwise, wait for the debounce period after interactions stop\n        timeout = setTimeout(() => {\n          lastExecuted = Date.now();\n          fn(...args);\n        }, debounceMs);\n      }\n    };\n  };\n};\n\n// Get Mapbox token from .env file\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN || 'pk.eyJ1Ijoic2NvZXR6ZWUiLCJhIjoiY202N3RnZzZzMDgzZTJyczg4d3Z2NDhubiJ9.htvS1yoTXD2iSzSEz5Z5Fw';\nconst Map = ({\n  activeLayers,\n  filters\n}) => {\n  _s();\n  // Create a request manager instance\n  const requestManager = useRef(createRequestManager());\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [loading, setLoading] = useState(false);\n  const [lng, setLng] = useState(0);\n  const [lat, setLat] = useState(20);\n  const [zoom, setZoom] = useState(1);\n  const [showZoomNotice, setShowZoomNotice] = useState(true);\n  const [isMapIdle, setIsMapIdle] = useState(true); // Track if map is not being interacted with\n  const [lastFetchTime, setLastFetchTime] = useState(null);\n  const [requestCount, setRequestCount] = useState(0);\n\n  // Initial map setup\n  useEffect(() => {\n    if (map.current) return; // Map already initialized\n\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/mapbox/light-v11',\n      center: [lng, lat],\n      zoom: zoom\n    });\n\n    // Wait for both map and style to load before adding layers\n    map.current.on('style.load', () => {\n      console.log('Map style loaded');\n\n      // Add source for clusters with empty data initially\n      if (!map.current.getSource('clusters')) {\n        map.current.addSource('clusters', {\n          type: 'geojson',\n          data: {\n            type: 'FeatureCollection',\n            features: []\n          },\n          cluster: false // We handle clustering on the server\n        });\n      }\n\n      // Layer for clusters (circles)\n      if (!map.current.getLayer('clusters-circles')) {\n        map.current.addLayer({\n          id: 'clusters-circles',\n          type: 'circle',\n          source: 'clusters',\n          filter: ['has', 'cluster'],\n          paint: {\n            'circle-color': ['step', ['get', 'point_count'], '#51bbd6',\n            // 0-20 points\n            20, '#f1f075',\n            // 20-100 points\n            100, '#f28cb1' // 100+ points\n            ],\n            'circle-radius': ['step', ['get', 'point_count'], 20,\n            // Base size\n            20, 25,\n            // 20-100 points\n            100, 30 // 100+ points\n            ],\n            'circle-opacity': 0.8,\n            'circle-stroke-width': 2,\n            'circle-stroke-color': '#fff',\n            'circle-stroke-opacity': 0.5\n          }\n        });\n      }\n\n      // Layer for cluster counts\n      if (!map.current.getLayer('cluster-counts')) {\n        map.current.addLayer({\n          id: 'cluster-counts',\n          type: 'symbol',\n          source: 'clusters',\n          filter: ['has', 'cluster'],\n          layout: {\n            'text-field': '{point_count_abbreviated}',\n            'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n            'text-size': 12\n          },\n          paint: {\n            'text-color': '#ffffff'\n          }\n        });\n      }\n\n      // Layer for individual points\n      if (!map.current.getLayer('unclustered-points')) {\n        map.current.addLayer({\n          id: 'unclustered-points',\n          type: 'circle',\n          source: 'clusters',\n          filter: ['!', ['has', 'cluster']],\n          paint: {\n            'circle-color': '#11b4da',\n            'circle-radius': 6,\n            'circle-stroke-width': 1,\n            'circle-stroke-color': '#fff'\n          }\n        });\n      }\n\n      // Layer for graduate points (separate visualization)\n      if (!map.current.getLayer('graduate-points')) {\n        map.current.addLayer({\n          id: 'graduate-points',\n          type: 'circle',\n          source: 'clusters',\n          filter: ['all', ['!', ['has', 'cluster']], ['==', ['get', 'is_graduate_learner'], true]],\n          paint: {\n            'circle-color': '#4caf50',\n            // Green for graduates\n            'circle-radius': 6,\n            'circle-stroke-width': 1,\n            'circle-stroke-color': '#fff'\n          }\n        });\n      }\n\n      // Layer for featured points (separate visualization)\n      if (!map.current.getLayer('featured-points')) {\n        map.current.addLayer({\n          id: 'featured-points',\n          type: 'circle',\n          source: 'clusters',\n          filter: ['all', ['!', ['has', 'cluster']], ['==', ['get', 'is_featured'], true]],\n          paint: {\n            'circle-color': '#ff9800',\n            // Orange for featured\n            'circle-radius': 6,\n            'circle-stroke-width': 1,\n            'circle-stroke-color': '#fff'\n          }\n        });\n      }\n\n      // Layer for entrepreneurs (separate visualization)\n      if (!map.current.getLayer('entrepreneur-points')) {\n        map.current.addLayer({\n          id: 'entrepreneur-points',\n          type: 'circle',\n          source: 'clusters',\n          filter: ['all', ['!', ['has', 'cluster']], ['==', ['get', 'is_running_a_venture'], true]],\n          paint: {\n            'circle-color': '#9c27b0',\n            // Purple for entrepreneurs\n            'circle-radius': 6,\n            'circle-stroke-width': 1,\n            'circle-stroke-color': '#fff'\n          }\n        });\n      }\n\n      // Initial data fetch after layers are added\n      if (map.current && map.current.loaded() && zoom >= 2) {\n        managedFetchClusters();\n      }\n    });\n\n    // Add navigation controls\n    map.current.addControl(new mapboxgl.NavigationControl(), 'top-left');\n\n    // Add fullscreen control\n    map.current.addControl(new mapboxgl.FullscreenControl());\n\n    // Add scale\n    map.current.addControl(new mapboxgl.ScaleControl({\n      maxWidth: 200,\n      unit: 'metric'\n    }));\n\n    // Timers ref for cleanup\n    const timers = {\n      idle: null\n    };\n\n    // Event handlers for map movement\n    map.current.on('move', () => {\n      setLng(parseFloat(map.current.getCenter().lng.toFixed(4)));\n      setLat(parseFloat(map.current.getCenter().lat.toFixed(4)));\n      setZoom(parseFloat(map.current.getZoom().toFixed(2)));\n      setIsMapIdle(false); // Map is moving, not idle\n    });\n\n    // Event handlers for map idle state - cancel any pending idle timer first\n    const handleInteractionStart = () => {\n      setIsMapIdle(false);\n      if (timers.idle) {\n        clearTimeout(timers.idle);\n      }\n    };\n\n    // Set the map to idle after interaction ends and delay\n    const handleInteractionEnd = () => {\n      if (timers.idle) {\n        clearTimeout(timers.idle);\n      }\n      timers.idle = setTimeout(() => {\n        setIsMapIdle(true);\n      }, 500); // A longer delay to ensure user has really stopped interacting\n    };\n\n    // Add interaction event listeners\n    map.current.on('mousedown', handleInteractionStart);\n    map.current.on('touchstart', handleInteractionStart);\n    map.current.on('mouseup', handleInteractionEnd);\n    map.current.on('touchend', handleInteractionEnd);\n    map.current.on('movestart', handleInteractionStart);\n    map.current.on('moveend', handleInteractionEnd);\n    map.current.on('dragstart', handleInteractionStart);\n    map.current.on('dragend', handleInteractionEnd);\n    map.current.on('zoomstart', handleInteractionStart);\n    map.current.on('zoomend', handleInteractionEnd);\n    map.current.on('pitchstart', handleInteractionStart);\n    map.current.on('pitchend', handleInteractionEnd);\n    map.current.on('rotatestart', handleInteractionStart);\n    map.current.on('rotateend', handleInteractionEnd);\n\n    // Clean up function\n    return () => {\n      if (timers.idle) {\n        clearTimeout(timers.idle);\n      }\n      if (map.current) {\n        // Remove event listeners\n        map.current.off('mousedown', handleInteractionStart);\n        map.current.off('touchstart', handleInteractionStart);\n        map.current.off('mouseup', handleInteractionEnd);\n        map.current.off('touchend', handleInteractionEnd);\n        map.current.off('movestart', handleInteractionStart);\n        map.current.off('moveend', handleInteractionEnd);\n        map.current.off('dragstart', handleInteractionStart);\n        map.current.off('dragend', handleInteractionEnd);\n        map.current.off('zoomstart', handleInteractionStart);\n        map.current.off('zoomend', handleInteractionEnd);\n        map.current.off('pitchstart', handleInteractionStart);\n        map.current.off('pitchend', handleInteractionEnd);\n        map.current.off('rotatestart', handleInteractionStart);\n        map.current.off('rotateend', handleInteractionEnd);\n      }\n    };\n  }, [lng, lat, zoom]);\n\n  // Update layers visibility based on active layers\n  useEffect(() => {\n    if (!map.current || !map.current.loaded()) return;\n\n    // Core cluster layers are always visible\n    const clusterLayers = ['clusters-circles', 'cluster-counts'];\n\n    // Point layers that can be toggled\n    const pointLayers = ['unclustered-points', 'featured-points', 'graduate-points', 'entrepreneur-points'];\n\n    // First, make all cluster layers visible\n    clusterLayers.forEach(layerId => {\n      map.current.setLayoutProperty(layerId, 'visibility', 'visible');\n    });\n\n    // Then handle the specific point layers based on active selection\n    pointLayers.forEach(layerId => {\n      // By default, hide all point layers\n      let visibility = 'none';\n\n      // If 'all-points' is active, show only the unclustered-points layer\n      if (activeLayers.includes('all-points') && layerId === 'unclustered-points') {\n        visibility = 'visible';\n      }\n      // If 'featured-points' is active, show only the featured-points layer\n      else if (activeLayers.includes('featured-points') && layerId === 'featured-points') {\n        visibility = 'visible';\n      }\n      map.current.setLayoutProperty(layerId, 'visibility', visibility);\n    });\n  }, [activeLayers]);\n\n  // Fetch clusters when filters change or map moves - memoized with useCallback\n  const fetchClusters = useCallback(async () => {\n    if (!map.current || !map.current.loaded()) return;\n    const currentZoom = Math.round(map.current.getZoom());\n\n    // For very low zoom levels, limit data fetching to prevent crashes\n    if (currentZoom < 2) {\n      setShowZoomNotice(true);\n      return;\n    } else {\n      setShowZoomNotice(false);\n    }\n\n    // Update fetch metrics\n    setLoading(true);\n    setLastFetchTime(new Date().toLocaleTimeString());\n    setRequestCount(prev => prev + 1);\n    try {\n      const bounds = map.current.getBounds();\n      const bbox = [bounds.getWest(), bounds.getSouth(), bounds.getEast(), bounds.getNorth()];\n\n      // Single API call with filters\n      const clustersResponse = await superclusterAPI.getClusters(bbox, currentZoom, filters);\n\n      // Enhanced cluster data logging\n      const clusters = clustersResponse.features.filter(f => f.properties.cluster);\n      const points = clustersResponse.features.filter(f => !f.properties.cluster);\n      console.log('Clusters Data:', {\n        total: clustersResponse.features.length,\n        clusterCount: clusters.length,\n        pointCount: points.length,\n        sampleCluster: clusters[0] ? {\n          properties: clusters[0].properties,\n          geometry: clusters[0].geometry\n        } : null,\n        samplePoint: points[0] ? {\n          properties: points[0].properties,\n          geometry: points[0].geometry\n        } : null\n      });\n\n      // Update the GeoJSON source with new data\n      if (map.current.getSource('clusters')) {\n        map.current.getSource('clusters').setData({\n          type: 'FeatureCollection',\n          features: clustersResponse.features\n        });\n      }\n\n      // Debug: Log layer visibility\n      if (map.current) {\n        console.log('Layer Visibility:', {\n          'clusters-circles': map.current.getLayoutProperty('clusters-circles', 'visibility'),\n          'cluster-counts': map.current.getLayoutProperty('cluster-counts', 'visibility'),\n          'unclustered-points': map.current.getLayoutProperty('unclustered-points', 'visibility')\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching clusters:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [filters]);\n\n  // Create a managed version of fetchClusters using our request manager\n  const managedFetchClusters = useCallback(() => {\n    requestManager.current(fetchClusters, {\n      throttleMs: 2000,\n      // At most one request every 2 seconds during continuous interaction\n      debounceMs: 800 // Wait 800ms after interaction stops before fetching\n    })();\n  }, [fetchClusters]);\n\n  // Fetch data when the map becomes idle after movement\n  useEffect(() => {\n    if (isMapIdle && map.current && map.current.loaded() && zoom >= 2) {\n      managedFetchClusters();\n    }\n  }, [isMapIdle, zoom, managedFetchClusters]);\n\n  // Fetch data when filters change, but only if map is ready\n  useEffect(() => {\n    if (map.current && map.current.loaded() && zoom >= 2) {\n      managedFetchClusters();\n    }\n  }, [filters, managedFetchClusters, zoom]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainer,\n      className: \"map-container\",\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 9\n    }, this), showZoomNotice && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"zoom-notice\",\n      children: \"Please zoom in to see data points\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"Longitude: \", lng, \"\\xB0 | Latitude: \", lat, \"\\xB0 | Zoom: \", zoom]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 9\n      }, this), lastFetchTime && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"fetch-info\",\n        children: [\" | Last fetch: \", lastFetchTime, \" | API Calls: \", requestCount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 439,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"DH7PCE2G/bsq2fPNNtAj0ir7NkE=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","mapboxgl","superclusterAPI","jsxDEV","_jsxDEV","createRequestManager","timeout","lastExecuted","fn","options","throttleMs","debounceMs","args","now","Date","remaining","clearTimeout","setTimeout","accessToken","process","env","REACT_APP_MAPBOX_ACCESS_TOKEN","Map","activeLayers","filters","_s","requestManager","mapContainer","map","loading","setLoading","lng","setLng","lat","setLat","zoom","setZoom","showZoomNotice","setShowZoomNotice","isMapIdle","setIsMapIdle","lastFetchTime","setLastFetchTime","requestCount","setRequestCount","current","container","style","center","on","console","log","getSource","addSource","type","data","features","cluster","getLayer","addLayer","id","source","filter","paint","layout","loaded","managedFetchClusters","addControl","NavigationControl","FullscreenControl","ScaleControl","maxWidth","unit","timers","idle","parseFloat","getCenter","toFixed","getZoom","handleInteractionStart","handleInteractionEnd","off","clusterLayers","pointLayers","forEach","layerId","setLayoutProperty","visibility","includes","fetchClusters","currentZoom","Math","round","toLocaleTimeString","prev","bounds","getBounds","bbox","getWest","getSouth","getEast","getNorth","clustersResponse","getClusters","clusters","f","properties","points","total","length","clusterCount","pointCount","sampleCluster","geometry","samplePoint","setData","getLayoutProperty","error","className","children","ref","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/stefancoetzee/Documents/GitHub/supercluster/frontend/src/components/Map.js"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport superclusterAPI from '../api/superclusterAPI';\n\n// Advanced request manager that combines throttling and debouncing\nconst createRequestManager = () => {\n  let timeout = null;\n  let lastExecuted = 0;\n  \n  return (fn, options = {}) => {\n    const { \n      throttleMs = 1000,   // Minimum time between executions during continuous interactions\n      debounceMs = 500     // Wait time after last interaction\n    } = options;\n    \n    return (...args) => {\n      const now = Date.now();\n      const remaining = lastExecuted + throttleMs - now;\n      \n      // Clear any existing timeout\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n\n      // If we've waited long enough, execute immediately\n      if (remaining <= 0) {\n        lastExecuted = now;\n        fn(...args);\n      } else {\n        // Otherwise, wait for the debounce period after interactions stop\n        timeout = setTimeout(() => {\n          lastExecuted = Date.now();\n          fn(...args);\n        }, debounceMs);\n      }\n    };\n  };\n};\n\n// Get Mapbox token from .env file\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN || 'pk.eyJ1Ijoic2NvZXR6ZWUiLCJhIjoiY202N3RnZzZzMDgzZTJyczg4d3Z2NDhubiJ9.htvS1yoTXD2iSzSEz5Z5Fw';\n\nconst Map = ({ activeLayers, filters }) => {\n  // Create a request manager instance\n  const requestManager = useRef(createRequestManager());\n  \n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const [loading, setLoading] = useState(false);\n  const [lng, setLng] = useState(0);\n  const [lat, setLat] = useState(20);\n  const [zoom, setZoom] = useState(1);\n  const [showZoomNotice, setShowZoomNotice] = useState(true);\n  const [isMapIdle, setIsMapIdle] = useState(true); // Track if map is not being interacted with\n  const [lastFetchTime, setLastFetchTime] = useState(null);\n  const [requestCount, setRequestCount] = useState(0);\n\n  // Initial map setup\n  useEffect(() => {\n    if (map.current) return; // Map already initialized\n\n    map.current = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/mapbox/light-v11',\n      center: [lng, lat],\n      zoom: zoom\n    });\n\n    // Wait for both map and style to load before adding layers\n    map.current.on('style.load', () => {\n      console.log('Map style loaded');\n      \n      // Add source for clusters with empty data initially\n      if (!map.current.getSource('clusters')) {\n        map.current.addSource('clusters', {\n          type: 'geojson',\n          data: {\n            type: 'FeatureCollection',\n            features: []\n          },\n          cluster: false // We handle clustering on the server\n        });\n      }\n\n      // Layer for clusters (circles)\n      if (!map.current.getLayer('clusters-circles')) {\n        map.current.addLayer({\n          id: 'clusters-circles',\n          type: 'circle',\n          source: 'clusters',\n          filter: ['has', 'cluster'],\n          paint: {\n            'circle-color': [\n              'step',\n              ['get', 'point_count'],\n              '#51bbd6', // 0-20 points\n              20,\n              '#f1f075', // 20-100 points\n              100,\n              '#f28cb1' // 100+ points\n            ],\n            'circle-radius': [\n              'step',\n              ['get', 'point_count'],\n              20, // Base size\n              20,\n              25, // 20-100 points\n              100,\n              30 // 100+ points\n            ],\n            'circle-opacity': 0.8,\n            'circle-stroke-width': 2,\n            'circle-stroke-color': '#fff',\n            'circle-stroke-opacity': 0.5\n          }\n        });\n      }\n\n      // Layer for cluster counts\n      if (!map.current.getLayer('cluster-counts')) {\n        map.current.addLayer({\n          id: 'cluster-counts',\n          type: 'symbol',\n          source: 'clusters',\n          filter: ['has', 'cluster'],\n          layout: {\n            'text-field': '{point_count_abbreviated}',\n            'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],\n            'text-size': 12\n          },\n          paint: {\n            'text-color': '#ffffff'\n          }\n        });\n      }\n\n      // Layer for individual points\n      if (!map.current.getLayer('unclustered-points')) {\n        map.current.addLayer({\n          id: 'unclustered-points',\n          type: 'circle',\n          source: 'clusters',\n          filter: ['!', ['has', 'cluster']],\n          paint: {\n            'circle-color': '#11b4da',\n            'circle-radius': 6,\n            'circle-stroke-width': 1,\n            'circle-stroke-color': '#fff'\n          }\n        });\n      }\n\n      // Layer for graduate points (separate visualization)\n      if (!map.current.getLayer('graduate-points')) {\n        map.current.addLayer({\n          id: 'graduate-points',\n          type: 'circle',\n          source: 'clusters',\n          filter: ['all', \n            ['!', ['has', 'cluster']], \n            ['==', ['get', 'is_graduate_learner'], true]\n          ],\n          paint: {\n            'circle-color': '#4caf50', // Green for graduates\n            'circle-radius': 6,\n            'circle-stroke-width': 1,\n            'circle-stroke-color': '#fff'\n          }\n        });\n      }\n\n      // Layer for featured points (separate visualization)\n      if (!map.current.getLayer('featured-points')) {\n        map.current.addLayer({\n          id: 'featured-points',\n          type: 'circle',\n          source: 'clusters',\n          filter: ['all', \n            ['!', ['has', 'cluster']], \n            ['==', ['get', 'is_featured'], true]\n          ],\n          paint: {\n            'circle-color': '#ff9800', // Orange for featured\n            'circle-radius': 6,\n            'circle-stroke-width': 1,\n            'circle-stroke-color': '#fff'\n          }\n        });\n      }\n\n      // Layer for entrepreneurs (separate visualization)\n      if (!map.current.getLayer('entrepreneur-points')) {\n        map.current.addLayer({\n          id: 'entrepreneur-points',\n          type: 'circle',\n          source: 'clusters',\n          filter: ['all', \n            ['!', ['has', 'cluster']], \n            ['==', ['get', 'is_running_a_venture'], true]\n          ],\n          paint: {\n            'circle-color': '#9c27b0', // Purple for entrepreneurs\n            'circle-radius': 6,\n            'circle-stroke-width': 1,\n            'circle-stroke-color': '#fff'\n          }\n        });\n      }\n\n      // Initial data fetch after layers are added\n      if (map.current && map.current.loaded() && zoom >= 2) {\n        managedFetchClusters();\n      }\n    });\n\n    // Add navigation controls\n    map.current.addControl(new mapboxgl.NavigationControl(), 'top-left');\n    \n    // Add fullscreen control\n    map.current.addControl(new mapboxgl.FullscreenControl());\n\n    // Add scale\n    map.current.addControl(new mapboxgl.ScaleControl({ maxWidth: 200, unit: 'metric' }));\n\n    // Timers ref for cleanup\n    const timers = {\n      idle: null\n    };\n\n    // Event handlers for map movement\n    map.current.on('move', () => {\n      setLng(parseFloat(map.current.getCenter().lng.toFixed(4)));\n      setLat(parseFloat(map.current.getCenter().lat.toFixed(4)));\n      setZoom(parseFloat(map.current.getZoom().toFixed(2)));\n      setIsMapIdle(false); // Map is moving, not idle\n    });\n\n    // Event handlers for map idle state - cancel any pending idle timer first\n    const handleInteractionStart = () => {\n      setIsMapIdle(false);\n      if (timers.idle) {\n        clearTimeout(timers.idle);\n      }\n    };\n\n    // Set the map to idle after interaction ends and delay\n    const handleInteractionEnd = () => {\n      if (timers.idle) {\n        clearTimeout(timers.idle);\n      }\n      timers.idle = setTimeout(() => {\n        setIsMapIdle(true);\n      }, 500); // A longer delay to ensure user has really stopped interacting\n    };\n\n    // Add interaction event listeners\n    map.current.on('mousedown', handleInteractionStart);\n    map.current.on('touchstart', handleInteractionStart);\n    map.current.on('mouseup', handleInteractionEnd);\n    map.current.on('touchend', handleInteractionEnd);\n    map.current.on('movestart', handleInteractionStart);\n    map.current.on('moveend', handleInteractionEnd);\n    map.current.on('dragstart', handleInteractionStart);\n    map.current.on('dragend', handleInteractionEnd);\n    map.current.on('zoomstart', handleInteractionStart);\n    map.current.on('zoomend', handleInteractionEnd);\n    map.current.on('pitchstart', handleInteractionStart);\n    map.current.on('pitchend', handleInteractionEnd);\n    map.current.on('rotatestart', handleInteractionStart);\n    map.current.on('rotateend', handleInteractionEnd);\n\n    // Clean up function\n    return () => {\n      if (timers.idle) {\n        clearTimeout(timers.idle);\n      }\n      \n      if (map.current) {\n        // Remove event listeners\n        map.current.off('mousedown', handleInteractionStart);\n        map.current.off('touchstart', handleInteractionStart);\n        map.current.off('mouseup', handleInteractionEnd);\n        map.current.off('touchend', handleInteractionEnd);\n        map.current.off('movestart', handleInteractionStart);\n        map.current.off('moveend', handleInteractionEnd);\n        map.current.off('dragstart', handleInteractionStart);\n        map.current.off('dragend', handleInteractionEnd);\n        map.current.off('zoomstart', handleInteractionStart);\n        map.current.off('zoomend', handleInteractionEnd);\n        map.current.off('pitchstart', handleInteractionStart);\n        map.current.off('pitchend', handleInteractionEnd);\n        map.current.off('rotatestart', handleInteractionStart);\n        map.current.off('rotateend', handleInteractionEnd);\n      }\n    };\n  }, [lng, lat, zoom]);\n\n  // Update layers visibility based on active layers\n  useEffect(() => {\n    if (!map.current || !map.current.loaded()) return;\n\n    // Core cluster layers are always visible\n    const clusterLayers = [\n      'clusters-circles',\n      'cluster-counts'\n    ];\n    \n    // Point layers that can be toggled\n    const pointLayers = [\n      'unclustered-points',\n      'featured-points',\n      'graduate-points',\n      'entrepreneur-points'\n    ];\n    \n    // First, make all cluster layers visible\n    clusterLayers.forEach(layerId => {\n      map.current.setLayoutProperty(layerId, 'visibility', 'visible');\n    });\n    \n    // Then handle the specific point layers based on active selection\n    pointLayers.forEach(layerId => {\n      // By default, hide all point layers\n      let visibility = 'none';\n      \n      // If 'all-points' is active, show only the unclustered-points layer\n      if (activeLayers.includes('all-points') && layerId === 'unclustered-points') {\n        visibility = 'visible';\n      }\n      // If 'featured-points' is active, show only the featured-points layer\n      else if (activeLayers.includes('featured-points') && layerId === 'featured-points') {\n        visibility = 'visible';\n      }\n      \n      map.current.setLayoutProperty(layerId, 'visibility', visibility);\n    });\n  }, [activeLayers]);\n\n  // Fetch clusters when filters change or map moves - memoized with useCallback\n  const fetchClusters = useCallback(async () => {\n    if (!map.current || !map.current.loaded()) return;\n    \n    const currentZoom = Math.round(map.current.getZoom());\n    \n    // For very low zoom levels, limit data fetching to prevent crashes\n    if (currentZoom < 2) {\n      setShowZoomNotice(true);\n      return;\n    } else {\n      setShowZoomNotice(false);\n    }\n    \n    // Update fetch metrics\n    setLoading(true);\n    setLastFetchTime(new Date().toLocaleTimeString());\n    setRequestCount(prev => prev + 1);\n\n    try {\n      const bounds = map.current.getBounds();\n      const bbox = [\n        bounds.getWest(),  \n        bounds.getSouth(),\n        bounds.getEast(),  \n        bounds.getNorth() \n      ];\n      \n      // Single API call with filters\n      const clustersResponse = await superclusterAPI.getClusters(\n        bbox,\n        currentZoom,\n        filters\n      );\n      \n      // Enhanced cluster data logging\n      const clusters = clustersResponse.features.filter(f => f.properties.cluster);\n      const points = clustersResponse.features.filter(f => !f.properties.cluster);\n      \n      console.log('Clusters Data:', {\n        total: clustersResponse.features.length,\n        clusterCount: clusters.length,\n        pointCount: points.length,\n        sampleCluster: clusters[0] ? {\n          properties: clusters[0].properties,\n          geometry: clusters[0].geometry\n        } : null,\n        samplePoint: points[0] ? {\n          properties: points[0].properties,\n          geometry: points[0].geometry\n        } : null\n      });\n      \n      // Update the GeoJSON source with new data\n      if (map.current.getSource('clusters')) {\n        map.current.getSource('clusters').setData({\n          type: 'FeatureCollection',\n          features: clustersResponse.features\n        });\n      }\n\n      // Debug: Log layer visibility\n      if (map.current) {\n        console.log('Layer Visibility:', {\n          'clusters-circles': map.current.getLayoutProperty('clusters-circles', 'visibility'),\n          'cluster-counts': map.current.getLayoutProperty('cluster-counts', 'visibility'),\n          'unclustered-points': map.current.getLayoutProperty('unclustered-points', 'visibility')\n        });\n      }\n    } catch (error) {\n      console.error('Error fetching clusters:', error);\n    } finally {\n      setLoading(false);\n    }\n  }, [filters]);\n\n  // Create a managed version of fetchClusters using our request manager\n  const managedFetchClusters = useCallback(() => {\n    requestManager.current(fetchClusters, {\n      throttleMs: 2000,  // At most one request every 2 seconds during continuous interaction\n      debounceMs: 800    // Wait 800ms after interaction stops before fetching\n    })();\n  }, [fetchClusters]);\n\n  // Fetch data when the map becomes idle after movement\n  useEffect(() => {\n    if (isMapIdle && map.current && map.current.loaded() && zoom >= 2) {\n      managedFetchClusters();\n    }\n  }, [isMapIdle, zoom, managedFetchClusters]);\n\n  // Fetch data when filters change, but only if map is ready\n  useEffect(() => {\n    if (map.current && map.current.loaded() && zoom >= 2) {\n      managedFetchClusters();\n    }\n  }, [filters, managedFetchClusters, zoom]);\n\n  return (\n    <div className=\"map-wrapper\">\n      <div ref={mapContainer} className=\"map-container\" style={{ width: '100%', height: '100%' }} />\n      {loading && (\n        <div className=\"loading-overlay\">\n          <div className=\"loading-spinner\"></div>\n        </div>\n      )}\n      {showZoomNotice && (\n        <div className=\"zoom-notice\">\n          Please zoom in to see data points\n        </div>\n      )}\n      <div className=\"map-info\">\n        <span>Longitude: {lng}° | Latitude: {lat}° | Zoom: {zoom}</span>\n        {lastFetchTime && (\n          <span className=\"fetch-info\"> | Last fetch: {lastFetchTime} | API Calls: {requestCount}</span>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Map; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}