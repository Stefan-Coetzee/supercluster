{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = '/api';\nexport const superclusterAPI = {\n  // Get clusters for a specific bounding box and zoom level\n  getClusters: async (bbox, zoom, filters = {}) => {\n    console.log(`API Request: getClusters at ${new Date().toLocaleTimeString()} - zoom: ${zoom}, bbox: [${bbox.join(', ')}]`);\n    console.log(`Filters:`, filters);\n    try {\n      const startTime = performance.now();\n      const response = await axios.post(`${API_BASE_URL}/getClusters`, {\n        bbox,\n        zoom,\n        filters\n      });\n      const endTime = performance.now();\n      console.log(`API Response received in ${(endTime - startTime).toFixed(0)}ms`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting clusters:', error);\n      throw error;\n    }\n  },\n  // Get available filters\n  getAvailableFilters: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/availableFilters`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting available filters:', error);\n      throw error;\n    }\n  },\n  // Get cache statistics\n  getStats: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/stats`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting stats:', error);\n      throw error;\n    }\n  },\n  // Clear the supercluster index cache\n  clearCache: async () => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/clearCache`);\n      return response.data;\n    } catch (error) {\n      console.error('Error clearing cache:', error);\n      throw error;\n    }\n  }\n};\nexport default superclusterAPI;","map":{"version":3,"names":["axios","API_BASE_URL","superclusterAPI","getClusters","bbox","zoom","filters","console","log","Date","toLocaleTimeString","join","startTime","performance","now","response","post","endTime","toFixed","data","error","getAvailableFilters","get","getStats","clearCache"],"sources":["/Users/stefancoetzee/Documents/GitHub/supercluster/frontend/src/api/superclusterAPI.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = '/api';\n\nexport const superclusterAPI = {\n  // Get clusters for a specific bounding box and zoom level\n  getClusters: async (bbox, zoom, filters = {}) => {\n    console.log(`API Request: getClusters at ${new Date().toLocaleTimeString()} - zoom: ${zoom}, bbox: [${bbox.join(', ')}]`);\n    console.log(`Filters:`, filters);\n    \n    try {\n      const startTime = performance.now();\n      const response = await axios.post(`${API_BASE_URL}/getClusters`, {\n        bbox,\n        zoom,\n        filters\n      });\n      const endTime = performance.now();\n      console.log(`API Response received in ${(endTime - startTime).toFixed(0)}ms`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting clusters:', error);\n      throw error;\n    }\n  },\n\n  // Get available filters\n  getAvailableFilters: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/availableFilters`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting available filters:', error);\n      throw error;\n    }\n  },\n\n  // Get cache statistics\n  getStats: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/stats`);\n      return response.data;\n    } catch (error) {\n      console.error('Error getting stats:', error);\n      throw error;\n    }\n  },\n\n  // Clear the supercluster index cache\n  clearCache: async () => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/clearCache`);\n      return response.data;\n    } catch (error) {\n      console.error('Error clearing cache:', error);\n      throw error;\n    }\n  }\n};\n\nexport default superclusterAPI; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,MAAM;AAE3B,OAAO,MAAMC,eAAe,GAAG;EAC7B;EACAC,WAAW,EAAE,MAAAA,CAAOC,IAAI,EAAEC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;IAC/CC,OAAO,CAACC,GAAG,CAAC,+BAA+B,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC,YAAYL,IAAI,YAAYD,IAAI,CAACO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;IACzHJ,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEF,OAAO,CAAC;IAEhC,IAAI;MACF,MAAMM,SAAS,GAAGC,WAAW,CAACC,GAAG,CAAC,CAAC;MACnC,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAAC,GAAGf,YAAY,cAAc,EAAE;QAC/DG,IAAI;QACJC,IAAI;QACJC;MACF,CAAC,CAAC;MACF,MAAMW,OAAO,GAAGJ,WAAW,CAACC,GAAG,CAAC,CAAC;MACjCP,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAACS,OAAO,GAAGL,SAAS,EAAEM,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;MAC7E,OAAOH,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdb,OAAO,CAACa,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAC,mBAAmB,EAAE,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMf,KAAK,CAACsB,GAAG,CAAC,GAAGrB,YAAY,mBAAmB,CAAC;MACpE,OAAOc,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdb,OAAO,CAACa,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAG,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMf,KAAK,CAACsB,GAAG,CAAC,GAAGrB,YAAY,QAAQ,CAAC;MACzD,OAAOc,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdb,OAAO,CAACa,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAI,UAAU,EAAE,MAAAA,CAAA,KAAY;IACtB,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAAC,GAAGf,YAAY,aAAa,CAAC;MAC/D,OAAOc,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdb,OAAO,CAACa,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AAED,eAAelB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}